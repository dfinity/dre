name: Build and repin
description: Reusable action for building and repin with bazel

inputs:
  app_id:
    description: 'App id for token generation'
    required: true
  app_private_key:
    description: 'Private key for the app to generate token'
    required: true
    
runs:
  using: composite
  steps:
    - name: "Build and repin"
      id: build
      run: |
        set -x
        function bazel_build_auto_repin() {
            local MYTMPDIR="$(mktemp -d)"
            trap 'rm -rf -- "$MYTMPDIR"' EXIT
            local logfile="$MYTMPDIR/bazel-out.log" 
            local r=0
            bazel "$@" 2>&1 | tee "$logfile" >&2 || r=1
            echo "repin=false" >> $GITHUB_OUTPUT
            if [ "$r" != "0" ]; then
                if grep -q 'Digests do not match' "$logfile" ; then
                    echo "repin=true" > $GITHUB_OUTPUT
                    return 0
                else
                    return $r
                fi
            fi
        }
        
        bazel_build_auto_repin build ...
      shell: bash
    
    - uses: actions/checkout@v4
      if: ${{ steps.build.outputs.repin == 'true' }}"
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - uses: tibdex/github-app-token@v1
      id: generate-token
      with:
        app_id: ${{ inputs.app_id }}
        app_private_key: ${{ inputs.app_private_key }}

    - name: Commit files
      if: ${{ steps.build.outputs.repin == 'true' }}"
      run: |
        CARGO_BAZEL_REPIN=true bazel build ... || return $?
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -a -m "Github Action: Bazel Repin"
      shell: bash

    - name: Push changes
      if: ${{ steps.build.outputs.repin == 'true' }}"
      uses: ad-m/github-push-action@master
      with:
        branch: ${{ github.head_ref }}
        github_token: ${{ steps.generate-token.outputs.token }}
