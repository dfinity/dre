name: Setup runner
description: Reusable action for tearing down the github runner

inputs:
  GITHUB_TOKEN:
    description: 'Automatically assigned GitHub Token'
    required: true

runs:
  using: composite
  steps:
    ########################################
    # Optimize bazel cache by hard-linking duplicate files
    ########################################
    - name: "🧹 Optimize bazel cache directory before uploading"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: ./bin/optimize-bazel-cache.sh
      shell: bash

    ########################################
    # Save cache:
    #
    # Cache is saved on main only to avoid cache evictions due to github restrictions:
    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
    ########################################
    - name: "☁️ ⬆️ Saving cache on main only"
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/cache/save@v4
      with:
        path: "~/.cache/bazel"
        # Configure cache updates
        # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
        # https://github.com/actions/cache/blob/main/examples.md#---bazel
        key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE.bazel', 'Cargo.Bazel.lock', 'requirements.lock') }}

    ########################################
    # Clean local Bazel cache if cache size > 250GB
    ########################################
    - name: "🧹 Clean local bazel cache"
      shell: bash
      run: |
        set -eExou pipefail
        CACHE_DIR="~/.cache"
        MAX_SIZE=$((250 ))
        CURRENT_SIZE=$(du -sb "$CACHE_DIR" | cut -f1)

        echo "Current cache size: $(numfmt --to=iec-i --suffix=B "$CURRENT_SIZE")"

        if [ "$CURRENT_SIZE" -gt "$MAX_SIZE" ]; then

          echo "=============== cleaning bazel cache ==============="

          rm -rf "$CACHE_DIR"
        fi
