name: Qualification

on:
  # triggered from Release Testing workflow in dfinity/ic
  workflow_call:
    inputs:
      version:
        description: "The version that should be qualified"
        type: string
        default: ""

# Run one qualification per commit.
# This means we can have multiple qualifications of different versions
# in parallel but only one qualification of each commit
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.version || github.ref }}
  cancel-in-progress: true

env:
  AUTO_UPDATE_BRANCH: "auto-update-rel-index"

jobs:
  setup:
    runs-on:
      labels: dre-runner-custom
    container: ghcr.io/dfinity/dre/actions-runner:81944049d9c85d2365f83fbcafc4e2baddd663c5
    outputs:
      matrix: ${{ steps.generate.outputs.output }}
    steps:
      - id: generate
        shell: bash
        run: |
          sudo apt-get install -y jq
          UNIQUE_VERSIONS=$(curl https://rollout-dashboard.ch1-rel1.dfinity.network/api/v1/rollouts | jq -r '.[] | select (.state != "failed") | select (.state != "complete") | .batches | to_entries[] | "\(.value)"' | jq '.subnets[].git_revision' |  sort | uniq | jq -s )
          echo "Will qualify starting from versions: ${UNIQUE_VERSIONS}"
          echo "output=$(jq -cn --argjson versions "$UNIQUE_VERSIONS" '{version: $versions}')" >> $GITHUB_OUTPUT

  qualify:
    name: Qualifying ${{ matrix.version }} -> ${{ inputs.version }}
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on:
      labels: dre-runner-custom
    container: ghcr.io/dfinity/dre/actions-runner:81944049d9c85d2365f83fbcafc4e2baddd663c5
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "dfinity/dre" # this needs to be specified so it can be kicked off from the ic repo

      - name: "🔍 Check if the version is set"
        shell: bash
        run: |
          if [ -z "${{ inputs.version }}" ]; then
            echo "Error: 'version' is required and cannot be empty."
            exit 1
          fi

      - name: "☁️ Setup runner"
        uses: ./.github/workflows/manage-runner-pre

      # This should be done in runner.Dockerfile
      - name: "Remove utsns and netns from containers.conf"
        shell: bash
        run: |
          sudo rm /etc/containers/containers.conf

      - name: "✨ Running qualification"
        shell: bash
        env:
          MANUALY_TTL_FARM: 1
        run: |
          mkdir -p ~/.config/dfx/identity/xnet-testing/
          echo "${{ secrets.XNET_PRINCIPAL_KEY }}" > ~/.config/dfx/identity/xnet-testing/identity.pem
          bazel run //rs/qualifier -- "${{ inputs.version }}" --initial-versions ${{ matrix.version }}

      - name: "⚙️ Uploading artifacts created during qualification"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.version }}-${{ matrix.version }}
          path: /tmp/qualifier-artifacts/${{ inputs.version }}
          retention-days: 1
          overwrite: true

  finish:
    needs: qualify
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "dfinity/dre" # this needs to be specified so it can be kicked off from the ic repo

      - name: "Get current date"
        id: date
        shell: bash
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: "Download all artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ${{ inputs.version }}-${{ steps.date.outputs.date }}
          pattern: ${{ inputs.version }}-*

      - name: "Printing what will be uploaded"
        shell: bash
        env:
          ARTIFACTS_DIR: ${{ inputs.version }}-${{ steps.date.outputs.date }}
        run: |
          sudo apt-get install -y tree
          tree $ARTIFACTS_DIR
          tar -cvf "$ARTIFACTS_DIR.tar" $ARTIFACTS_DIR

      - name: "Upload artifacts to google drive"
        uses: adityak74/google-drive-upload-git-action@v0.3
        with:
          credentials: ${{ secrets.ARTIFACTS_DRIVE_CREDENTIALS }}
          filename: ${{ inputs.version }}-${{ steps.date.outputs.date }}.tar
          folderId: ${{ secrets.ARTIFACTS_DRIVE_FOLDER_ID }}
          name: ${{ inputs.version }}-${{ steps.date.outputs.date }}.tar

      - name: "Setup message"
        id: slack
        shell: bash
        run: |
          COMMIT="${{ inputs.version }}"
          FULL_MESSAGE="Qualification of \`${COMMIT}\`: "
          if [[ "${{ needs.qualify.result }}" =~ ^(success)$ ]]; then
            FULL_MESSAGE="${FULL_MESSAGE} :white_check_mark:"
          elif [[ "${{ needs.qualify.result }}" =~ ^(failure|timed_out)$ ]]; then
            FULL_MESSAGE="${FULL_MESSAGE} :x:"
          fi

          echo "message=${FULL_MESSAGE}" >> $GITHUB_OUTPUT

      - name: "Notify DRE on slack"
        uses: slackapi/slack-github-action@37ebaef184d7626c5f204ab8d3baff4262dd30f0 # v1.27.0
        with:
          channel-id: eng-release-bots
          slack-message: |
            ${{ steps.slack.outputs.message }}

            Artifacts of run: `${{ inputs.version }}-${{ steps.date.outputs.date }}.tar`
            Artifacts can be found on <https://drive.google.com/drive/u/1/folders/${{secrets.ARTIFACTS_DRIVE_FOLDER_ID}}|Google Drive :open_file_folder:>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_API_TOKEN }}

      - name: "Modify release index"
        if: ${{ needs.qualify.result == 'success' }}
        id: modify
        shell: bash
        run: |
          pip install ruamel.yaml

          BRANCH_REF=$(git ls-remote --heads https://github.com/dfinity/dre.git refs/heads/${AUTO_UPDATE_BRANCH})
          if [ -z "$BRANCH_REF" ]; then
            echo "Branch $AUTO_UPDATE_BRANCH does not exist, creating..."
            git checkout -b $AUTO_UPDATE_BRANCH
            echo "SHOULD_CREATE_PR=true" >> $GITHUB_OUTPUT
          else
            echo "Branch $AUTO_UPDATE_BRANCH exists"
            git checkout $AUTO_UPDATE_BRANCH
            echo "SHOULD_CREATE_PR=false" >> $GITHUB_OUTPUT
          fi

          # Cache current version of script to be able to force checkout main
          # If testing it is usually hard to get the version correct so this is
          # a workaround
          cp scripts/auto-update-release-index.py /tmp/auto-update-release-index.py
          git fetch origin main --depth 1
          git checkout main

          rye sync
          rye run python3 /tmp/auto-update-release-index.py ${{ inputs.version }} ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: "Create/Update PR after a successful rc cut"
        if: ${{ needs.qualify.result == 'success' && steps.modify.outputs.SHOULD_CREATE == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: Update `release-index.yaml` after a successful rc cut of ${{ inputs.version }}"
          branch: ${{ env.AUTO_UPDATE_BRANCH }}
          title: "chore: Update `release-index.yaml`"
          body: "This PR updates `release-index.yaml` after a successful rc cut"
          token: ${{ secrets.GIX_CREATE_PR_PAT }}
