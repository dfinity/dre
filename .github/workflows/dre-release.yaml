name: Release DRE binary
on:
  push:
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on:
      labels: dre-runner-custom
    container: ghcr.io/dfinity/dre/actions-runner:6413f2909a49329ecbf5371ee7ddf07a9799b625
    steps:
      - uses: actions/checkout@v4

      - name: "☁️ Setup runner"
        uses: ./.github/workflows/manage-runner-pre

      - name: "🚀 Testing"
        env:
          STAGING_PRIVATE_KEY_PEM: "${{ secrets.STAGING_PRIVATE_KEY_PEM }}"
        run: |
          mkdir -p ~/.config/dfx/identity/bootstrap-super-leader/
          echo $STAGING_PRIVATE_KEY_PEM > ~/.config/dfx/identity/bootstrap-super-leader/identity.pem
          bazel test //rs/cli:unit_test --spawn_strategy=local --test_env=HOME=/home/runner

  build-macos-x86_64:
    needs: [test]
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Rust toolchain from rust-toolchain.toml
        id: rust
        run: |
          set -euo pipefail
          ver=$(awk -F\" '/^channel =/ {print $2}' rust-toolchain.toml)
          if [ -z "$ver" ]; then
            echo "Failed to parse Rust toolchain channel from rust-toolchain.toml" >&2
            exit 1
          fi
          echo "toolchain=$ver" >> "$GITHUB_OUTPUT"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}

      - name: Install protoc (protobuf) and export env
        run: |
          set -euo pipefail
          brew update
          brew install protobuf
          prefix=$(brew --prefix protobuf)
          echo "PROTOC=$prefix/bin/protoc" >> "$GITHUB_ENV"
          echo "PROTOC_INCLUDE=$prefix/include" >> "$GITHUB_ENV"
          "$prefix/bin/protoc" --version

      - name: Build dre (x86_64-apple-darwin)
        run: |
          set -euo pipefail
          cargo build --release -p dre

      - name: Upload macOS x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dre-x86_64-apple-darwin
          path: target/release/dre
          if-no-files-found: error

  build-macos-aarch64:
    needs: [test]
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Rust toolchain from rust-toolchain.toml
        id: rust
        run: |
          set -euo pipefail
          ver=$(awk -F\" '/^channel =/ {print $2}' rust-toolchain.toml)
          if [ -z "$ver" ]; then
            echo "Failed to parse Rust toolchain channel from rust-toolchain.toml" >&2
            exit 1
          fi
          echo "toolchain=$ver" >> "$GITHUB_OUTPUT"

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust.outputs.toolchain }}

      - name: Install protoc (protobuf) and export env
        run: |
          set -euo pipefail
          brew update
          brew install protobuf
          prefix=$(brew --prefix protobuf)
          echo "PROTOC=$prefix/bin/protoc" >> "$GITHUB_ENV"
          echo "PROTOC_INCLUDE=$prefix/include" >> "$GITHUB_ENV"
          "$prefix/bin/protoc" --version

      - name: Build dre (aarch64-apple-darwin)
        run: |
          set -euo pipefail
          rustup target add aarch64-apple-darwin
          cargo build --release -p dre --target aarch64-apple-darwin

      - name: Upload macOS aarch64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: dre-aarch64-apple-darwin
          path: target/aarch64-apple-darwin/release/dre
          if-no-files-found: error

  release:
    needs: [test, build-macos-x86_64, build-macos-aarch64]
    runs-on:
      labels: dre-runner-custom
    container: ghcr.io/dfinity/dre/actions-runner:6413f2909a49329ecbf5371ee7ddf07a9799b625
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: "☁️ Setup runner"
        uses: ./.github/workflows/manage-runner-pre

      # The GitHub App token is necessary for pushing changed files back to the repository
      # If regular secrets.GITHUB_TOKEN is used instead, the push will not trigger any actions
      # https://github.com/orgs/community/discussions/25702
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.PR_AUTOMATION_BOT_PUBLIC_APP_ID }}
          private-key: ${{ secrets.PR_AUTOMATION_BOT_PUBLIC_PRIVATE_KEY }}

      - name: Determine tag
        shell: bash
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == refs/* ]]; then
            echo "Invalid value for tag $TAG"
            exit 1
          fi

          echo "Will be using tag $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Update tags in code
        shell: bash
        run: |
          rye run python bin/mk-release.py ${{ steps.tag.outputs.tag }}

      - name: Build artifacts
        shell: bash
        run: |
          CARGO_BAZEL_REPIN=true bazel build --config=ci //rs/cli:dre

          mkdir -p release/artifacts
          cp --dereference bazel-out/k8-opt/bin/rs/cli/dre release/artifacts/dre-x86_64-unknown-linux

      - name: Download macOS x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: dre-x86_64-apple-darwin
          path: release/artifacts/

      - name: Rename macOS x86_64 artifact
        shell: bash
        run: mv release/artifacts/dre release/artifacts/dre-x86_64-apple-darwin

      - name: Download macOS aarch64 artifact
        uses: actions/download-artifact@v4
        with:
          name: dre-aarch64-apple-darwin
          path: release/artifacts/

      - name: Rename macOS aarch64 artifact
        shell: bash
        run: mv release/artifacts/dre release/artifacts/dre-aarch64-apple-darwin

      - name: Generate changelog
        shell: bash
        run: |
          git cliff --current --sort newest > release/CHANGELOG.md

      - name: "🆕 📢 Prepare release"
        # v0.1.15
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.tag.outputs.tag }}
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: release/CHANGELOG.md
          draft: true
          prerelease: true
          files: |
            release/artifacts/*

      - name: "Clean up release artifacts"
        shell: bash
        run: |
          rm -rf release

      - name: "🆕 Create a new Pull Request with the changes"
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore(release): New release of `dre` version ${{ steps.tag.outputs.tag }}"
          branch: bot-release-${{ steps.tag.outputs.tag }}
          title: "chore(release): New release of `dre` version ${{ steps.tag.outputs.tag }}"
          body: |
            This PR updates versions in the code used to generate the contents of a new release [${{ steps.tag.outputs.tag }}](${{ steps.release.outputs.url }})

            If the release notes are correct, set it as latest release and publish it.
          token: ${{ steps.app-token.outputs.token }}
          base: main
