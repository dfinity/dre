load("@python_deps//:requirements.bzl", "requirement")
load("@rules_oci//oci:defs.bzl", "oci_load")
load("@rules_python//python:defs.bzl", "py_binary")
load("@//tools/python:py_oci_image.bzl", "py_oci_image")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@aspect_bazel_lib//lib:tar.bzl", "tar")

env = {
    "BAZEL": "true",
}

native_binary(
    name = "bazelisk",
    src = select({
        "@platforms//os:linux": "@bazelisk_linux//file",
    }),
    out = "bazel",
)

native_binary(
    name = "target_determinator",
    src = select({
        "@platforms//os:linux": "@target_determinator//file",
    }),
    out = "target-determinator",
)


py_library (
    name = "const",
    srcs = ["const.py"],
    tags = ["typecheck"],
)

py_library (
    name = "util",
    srcs = ["util.py"],
    tags = ["typecheck"],
    deps = [
        requirement("requests"),
        requirement("types-requests"),
    ],
)

py_library (
    name = "release_index",
    srcs = ["release_index.py"],
    tags = ["typecheck"],
    deps = [requirement("pydantic")],
)

py_library (
    name = "git_repo",
    srcs = ["git_repo.py"],
    tags = ["typecheck"],
    deps = ["release_index", "util"] + [
        requirement("python-dotenv"),
    ],
)

py_library (
    name = "commit_annotation",
    srcs = ["commit_annotation.py"],
    deps = ["git_repo", "const"] + [
        requirement("requests"),
        requirement("types-requests"),
    ],
    tags = ["typecheck"],
)

py_library (
    name = "release_notes_composer",
    data = [],
    srcs = ["release_notes_composer.py"],
    deps = [
        requirement("markdown"),
        requirement("pymdown-extensions"),
    ] + ["commit_annotation"],
    tags = ["typecheck"],
)

py_library (
    name = "google_docs",
    data = [],
    srcs = ["google_docs.py"],
    deps = [
        requirement("markdown"),
        requirement("pymdown-extensions"),
        requirement("markdownify"),
        requirement("pydrive2"),
        requirement("mammoth"),
        requirement("pydantic"),
    ] + ["release_notes_composer"],
    tags = ["typecheck"],
)

py_library (
    name = "publish_notes",
    srcs = ["publish_notes.py"],
    deps = ["google_docs", "release_notes_composer"] + [
        requirement("python-dotenv"),
        requirement("pygithub"),
    ],
    tags = ["typecheck"],
)

py_library (
    name = "release_index_loader",
    srcs = ["release_index_loader.py"],
    tags = ["typecheck"],
    deps = ["publish_notes", "release_index", "const", "git_repo"] + [
        requirement("pydantic-yaml"),
        requirement("python-dotenv"),
    ],
)


py_library (
    name = "dre_cli",
    data = ["//rs/cli:dre-embedded"],
    srcs = ["dre_cli.py"],
    deps = ["const", "util"],
    tags = ["typecheck"],
)

py_library (
    name = "public_dashboard",
    srcs = ["public_dashboard.py"],
    deps = ["const", "dre_cli", requirement("requests")],
    tags = ["typecheck"],
)

py_library (
    name = "process_watchdog",
    srcs = ["process_watchdog.py"],
    tags = ["typecheck"],
)

py_library (
    name = "reconciler_state",
    srcs = ["reconciler_state.py"],
    tags = ["typecheck"],
    deps = ["dre_cli"],
)

py_library (
    name = "forum",
    data = [],
    srcs = ["forum.py"],
    deps = ["release_index", "reconciler_state", "util"] + [
        requirement("pydiscourse"),
        requirement("python-dotenv"),
        requirement("pydantic"),
    ],
    tags = ["typecheck"],
)

py_library (
    name = "prometheus",
    data = [],
    srcs = ["prometheus.py"],
    deps = [
        requirement("requests"),
        requirement("types-requests"),
    ],
    tags = ["typecheck"],
)

py_library (
    name = "dryrun",
    data = [],
    srcs = ["dryrun.py"],
    deps = ["forum", "dre_cli", "google_docs", "release_index", "release_notes_composer", "const"] + [
        requirement("pydiscourse"),
    ],
    tags = ["typecheck"],
)

py_binary(
    name = "release-controller",
    main = "reconciler.py",
    srcs = ["reconciler.py", "slack_announce.py"],
    tags = ["typecheck"],
    deps = ["dre_cli", "public_dashboard", "publish_notes", "forum", "process_watchdog", "prometheus", "release_notes_composer", "release_index_loader", "dryrun"] + [
        requirement("pydiscourse"),
        requirement("requests"),
        requirement("types-requests"),
        requirement("prometheus-client"),
        requirement("python-dotenv"),
        requirement("pygithub"),
        requirement("slack-sdk"),
    ],
    data = ["//rs/cli:dre-embedded"],
)

py_binary(
    name = "commit-annotator",
    main = "commit_annotator.py",
    srcs = ["commit_annotator.py"],
    tags = ["typecheck"],
    env = env,
    data = [":bazelisk", ":target_determinator"],
    deps = ["commit_annotation", "process_watchdog"] + [
        requirement("prometheus-client"),
        requirement("tenacity"),
    ],
)

py_library (
    name = "commit_annotation_recreator",
    data = [],
    srcs = ["commit_annotation_recreator.py"],
    deps = ["commit-annotator", "git_repo", "const", "commit_annotation"],
    tags = ["typecheck"],
)

py_binary(
    name = "release-notes",
    main = "release_notes.py",
    srcs = ["release_notes.py"],
    tags = ["typecheck"],
    env = env,
    deps = ["release_notes_composer", "commit_annotation_recreator"],
)

py_binary(
    name = "dry-run",
    main = "dryrun.py",
    srcs = ["dryrun.py"],
    env = env,
    deps = ["dre_cli", "git_repo", "google_docs", "release_notes_composer", "release_index", "forum"],
)

genrule(
    name = "ic_repo_clone",
    outs = ["ic.git.tar"],
    cmd = "echo cachebust >/dev/null ; rm -rf `dirname $@`/ic.git && git clone https://github.com/dfinity/ic.git `dirname $@`/ic.git && cd `dirname $@`/ic.git && tar cf ../ic.git.tar .",
    tags = ["no-sandbox"] + ["manual"],
)

genrule(
    name = "dre_repo_clone",
    outs = ["dre.git.tar"],
    cmd = "echo cachebust >/dev/null ; rm -rf `dirname $@`/dre.git && git clone https://github.com/dfinity/dre.git `dirname $@`/dre.git && cd `dirname $@`/dre.git && tar cf ../dre.git.tar .",
    tags = ["no-sandbox"] + ["manual"],
)

medium_tests = ["tests/test_release_notes.py", "tests/test_reconciler.py"]
medium_tests_deps = ["release-controller", "commit_annotation", "release_notes_composer"] + [
    requirement("pygithub"),
    requirement("pydantic-yaml"),
]

# Add file here if you do not want to run the test automatically.
large_tests = ["tests/test_commit_annotator.py"]
large_tests_deps = ["commit-annotator"]

small_tests = glob(["tests/test_*.py"], exclude=large_tests + medium_tests)
small_tests_deps = ["forum", "publish_notes", "release_index_loader", "dryrun"] + [
    requirement("httpretty"),
]

# We group tests into large, medium and small to take advantage of the
# parallelism that such an arrangement provides -- PyTest + XDist can
# aggregate all tests in a suite and run them all in parallel, while
# the size division ensures that large tests don't cause small tests
# to fail due to the large tests timing out.
[
    [
        py_test(
            name = group["test_size"] + "_tests",
            srcs = ["tests/runner.py"] + group["targets"] + glob(["tests/mock_*.py"]) + ["tests/fixtures.py"],
            data = group["data"] + ["//:pyproject.toml"] + ["ic_repo_clone", 'dre_repo_clone'],
            main = "tests/runner.py",
            env = env | {
                "IC_REPO_SEED_TAR": "$(location ic_repo_clone)",
                "DRE_REPO_SEED_TAR": "$(location dre_repo_clone)",
            },
            tags = ["typecheck", "no-sandbox"],
            deps = [
                requirement("pytest"),
                requirement('pytest-mock'),
                requirement("pytest-xdist"),
                requirement("filelock"),
            ] + group["deps"],
            env_inherit = ["HOME"],
            size = group["test_size"],
        )
    ]
    for group in [
        {
            "targets": small_tests + medium_tests,
            "data": glob(["tests/test_data/*"]),
            "deps": small_tests_deps + medium_tests_deps,
            "test_size": "medium",
        },
        {
            "targets": large_tests,
            "data": [],
            "deps": large_tests_deps,
            "test_size": "large",
        },
    ]
]

# bazel run ...:oci_image_load to load the reconciler container
# into Podman as an image, then
# podman run -it --entrypoint=/bin/sh <sha256 printed>
py_oci_image(
    name = "oci_image",
    base = "//images:ubuntu_24_04",
    binary = ":release-controller",
    tars = [],
)

# bazel run ...:oci_image_commit_annotator_load to load the
# commit annotator container into Podman as an image, then
# podman run -it --entrypoint=/bin/sh <sha256 printed>
# Note that `podman run`
# will require `--user $UID` or else Bazel will fail.
py_oci_image(
    name = "oci_image_commit_annotator",
    base = "//images:ubuntu_24_04",
    binary = ":commit-annotator",
    tars = []
)

# bazel run ...:oci_image_release_notes_load loads a container
# image with just the release notes code.  Like the targets above,
# it is runnable via podman after loading.  This target does
# not get published to the OCI repository.
#
# This target is useful to run the release notes process
# from the container, to diagnose issues with specific commits
# not being annotated properly (in conjunction with flag
# `--commit-annotator-url=recreate`).  Note that `podman run`
# will require `--user $UID` or else Bazel will fail.
# See heading Generate release notes locally in file README.txt
# on this folder for more details on local release notes generation.
py_oci_image(
    name = "oci_image_release_notes",
    base = "//images:ubuntu_24_04",
    binary = ":release-notes",
    tars = [],
    publish = False,
)

exports_files(["README.md"])
