load("@python_deps//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary")
load("@//tools/python:py_oci_image.bzl", "py_oci_image")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@aspect_bazel_lib//lib:tar.bzl", "tar")

deps = [
    requirement("requests"),
    requirement("pydrive2"),
    requirement("markdown"),
    requirement("markdownify"),
    requirement("pymdown-extensions"),
    requirement("pytest"),
    requirement("pygithub"),
    requirement("pytest-mock"),
    requirement("mammoth"),
    requirement("slack-sdk"),
    requirement("python-dotenv"),
    requirement("pydiscourse"),
    requirement("pydantic-yaml"),
    requirement("ic-py"),
    requirement("tenacity"),
]

dev_deps = [
    requirement("httpretty"),
    requirement("pytest-xdist"),
    requirement("types-requests"),
    requirement("mypy"),
]

env = {
    "BAZEL": "true",
}

py_binary(
    name = "release-controller",
    main = "reconciler.py",
    srcs = glob(["*.py"], exclude = ["commit_annotator.py", "ci_check.py"]),
    tags = ["typecheck"],
    env = {
        "DRE_PATH": "$(rootpath //rs/cli:dre)",
    },
    deps = deps + [
        requirement("prometheus-client"),
    ],
    data = ["//rs/cli:dre"],
)

py_binary(
    name = "commit-annotator",
    main = "commit_annotator.py",
    srcs = glob(["*.py"], exclude = ["reconciler.py", "ci_check.py"]),
    tags = ["typecheck"],
    data = [":bazelisk", ":target_determinator"],
    env = env,
    deps = deps + [
        requirement("prometheus-client"),
    ],
)

native_binary(
    name = "bazelisk",
    src = select({
        "@platforms//os:linux": "@bazelisk_linux//file",
    }),
    out = "bazel",
)

native_binary(
    name = "target_determinator",
    src = select({
        "@platforms//os:linux": "@target_determinator//file",
    }),
    out = "target-determinator",
)

# Add file here if you do not want to run the test automatically.
long_tests = ["tests/test_commit_annotator.py"]

[
    [
        py_test(
            name = target[6:-3],
            srcs = ["tests/runner.py"] + [target] + glob(["tests/mock_*.py"]),
            data = glob(["tests/test_data/*"]),
            main = "tests/runner.py",
            env = env,
            tags = ["no-sandbox"] + group["tags"],
            deps = deps + dev_deps + ["release-controller"],
            env_inherit = ["HOME"],
        )
        for target in group["targets"]
    ]
    for group in [
        {"targets": glob(["tests/test_*.py"], exclude=long_tests), "tags": ["typecheck"]},
        {"targets": long_tests, "tags": ["manual"]},
    ]
]

tar(
    name = "bins_release_controller_tar",
    srcs = ["//rs/cli:dre"],
)

tar(
    name = "bins_commit_annotator_tar",
    srcs = [":bazelisk", ":target_determinator"],
)

py_oci_image(
    name = "oci_image",
    base = "@bazel_image_7_4_1",
    binary = ":release-controller",
    tars = [":bins_release_controller_tar"]
)

py_oci_image(
    name = "oci_image_commit_annotator",
    base = "@bazel_image_7_4_1",
    binary = ":commit-annotator",
    tars = [":bins_commit_annotator_tar"]
)

exports_files(["README.md"])
