type PrincipalId = principal;
type SubnetId = PrincipalId;
type NodeId = PrincipalId;

type NodeProvidersRewardsXDRTotal = record {
  // Total rewards in permyriad XDR for all providers
  rewards_xdr_permyriad_per_provider : vec record { PrincipalId; nat64 };
};

type RewardPeriodArgs = record {
  // First timestamp of the day in nanoseconds
  start_ts : nat64;
  // Last timestamp of the day in nanoseconds
  end_ts : nat64;
};

type NodeProviderRewardsCalculationArgs = record {
    provider_id: PrincipalId;
    reward_period: RewardPeriodArgs;
};

type DailyNodeResults = record {
    // UTC Day with format "DD-MM-YYYY"
    utc_day: text;
    subnet_assigned: SubnetId;
    blocks_proposed: nat64;
    blocks_failed: nat64;
    // The failure rate before subnet failure rate adjustment
    original_failure_rate: float64;
    // [RFR]
    // The daily failure rate after subnet failure rate adjustment
    relative_failure_rate: float64;
};

type NodeResults = record {
    node_type: text;
    region: text;
    // None if the node is unassigned in the entire reward period
    daily_node_results: opt vec DailyNodeResults;
    // [AEFR]
    // Failure rate average for the entire reward period
    // On days when the node is unassigned EFR is used
    // On days when the node is assigned RFR is used
    average_fr: float64;
    // [RR]
    // * For nodes with AEFR < 0.1, the rewards reduction is 0
    // * For nodes with AEFR > 0.6, the rewards reduction is 0.8
    // * For nodes with 0.1 <= AEFR <= 0.6, the rewards reduction is linearly interpolated between 0 and 0.8
    rewards_reduction: float64;
    // [PM]
    // Performance multiplier is calculated as 1 - RR
    performance_multiplier: float64;
    base_rewards: float64;
    // [AR]
    // Adjusted rewards are calculated as base_rewards * PM
    adjusted_rewards: float64;
};

type BaseRewardsByCategory = record {
    node_type: text;
    region: text;
    base_rewards: float64;
};

type DailySubnetFailureRate = record {
    utc_day: text;
    fr: float64;
};

type NodeProviderRewardsCalculation = record {
    daily_subnets_fr: vec record { SubnetId; vec DailySubnetFailureRate };
    // [EFR]
    // Extrapolated failure rate used as replacement for days when the node is unassigned
    extrapolated_fr: float64;
    results_by_node: vec record { NodeId; NodeResults };
    rewards_by_category: vec BaseRewardsByCategory;
    // Total rewards for the provider in XDR
    rewards_total_xdr: nat64;
};

type GetNodeProviderRewardsCalculationResponse = variant {
  Ok : NodeProviderRewardsCalculation;
  Err : text;
};

type GetNodeProvidersRewardsXDRTotalResponse = variant {
  Ok : NodeProvidersRewardsXDRTotal;
  Err : text;
};


service : {
    get_node_providers_rewards_xdr_total : (RewardPeriodArgs) -> (GetNodeProvidersRewardsXDRTotalResponse) query;
    get_node_provider_rewards_calculation : (NodeProviderRewardsCalculationArgs) -> (GetNodeProviderRewardsCalculationResponse) query;
}
