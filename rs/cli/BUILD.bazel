load("@crate_index_dre//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_test", "rust_library")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")

DEPS = [
    "//rs/ic-canisters",
    "//rs/decentralization",
    "//rs/ic-management-types",
    "//rs/ic-management-backend:ic-management-backend-lib",
    "//rs/dre-canisters/trustworthy-node-metrics/src/trustworthy-node-metrics-types:trustworthy_node_metrics_types"
]

package(default_visibility = ["//visibility:public"])

cargo_build_script(
    name = "build_script",
    srcs = ["src/build.rs"],
    deps = all_crate_deps(
        build = True
    ),
    build_script_env = {
        "NON_PUBLIC_SUBNETS": "$(execpath //facts-db:non_public_subnets)"
    },
    data = [ "//facts-db:non_public_subnets" ]
)

rust_binary(
    name = "dre",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(),
    rustc_env_files = [":generate_rustc_env_file"],
    proc_macro_deps = all_crate_deps(
        proc_macro = True,
    ),
    deps = all_crate_deps(
        normal = True,
    ) + DEPS + ["//rs/cli:dre-lib", ":build_script"],
    data = [
        "//:cordoned_features.yaml",
    ],
    compile_data = [ "src/assets/subnet_topic_map.json" ],
)

rust_binary(
    name = "dre-embedded", # Variant does not have an embedded git revision, which permits caching of dependents.
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(),
    rustc_env_files = [],
    proc_macro_deps = all_crate_deps(
        proc_macro = True,
    ),
    deps = all_crate_deps(
        normal = True,
    ) + DEPS + ["//rs/cli:dre-lib", ":build_script"],
    data = [
        "//:cordoned_features.yaml",
    ],
    compile_data = [ "src/assets/subnet_topic_map.json" ],
)

rust_library(
    name = "dre-lib",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(),
    compile_data = glob(["config/**/*"]) + [ "src/assets/subnet_topic_map.json" ],
    crate_name = "dre",
    proc_macro_deps = all_crate_deps(
        proc_macro = True,
    ),
    deps = all_crate_deps(
        normal = True,
    ) + DEPS + [ ":build_script" ],
)

rust_test(
    name = "unit_test",
    aliases = aliases(
        normal_dev = True,
        proc_macro_dev = True,
    ),
    crate = ":dre",
    proc_macro_deps = all_crate_deps(
        proc_macro_dev = True,
    ),
    deps = all_crate_deps(
        normal_dev = True,
    ) + DEPS,
)

genrule(
    name = "generate_rustc_env_file",
    outs = ["rustc_env_file"],
    cmd = "echo \"CARGO_PKG_VERSION=$$(awk '$$1 == \"RELEASE_VERSION\" {print $$2}' bazel-out/volatile-status.txt)-$$(awk '$$1 == \"GIT_REV\" {print $$2}' bazel-out/volatile-status.txt)\" > $@",
    stamp = True,
)
