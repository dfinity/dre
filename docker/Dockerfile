# Start the Python build.
FROM ubuntu:20.04 as pythonbuilder

ENV TZ=UTC

# The Python build dependencies section in this install command
# should be updated both here and in the README.md file.
# The Python runtime dependencies are installed below.
# (see "Python runtime dependencies").
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    apt -yq update && \
    apt -yqq install --no-install-recommends \
        git openssh-client curl xz-utils time apt-transport-https ca-certificates lsb-release gnupg2 && \
    apt -yq update && \
    echo Installing Python build dependencies >&2 && \
    apt -yq install --no-install-recommends \
        build-essential libncurses-dev libbz2-dev libreadline-dev \
        libssl-dev make build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
        libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
        libffi-dev liblzma-dev

# Set Python up in /opt/pyenv.
RUN mkdir -p /opt/pyenv
COPY pyproject.toml poetry.lock /opt/pyenv/
RUN echo Installing the correct Python and requisite modules >&2 && \
    set -ex && \
    cd /opt/pyenv && \
    export PYENV_ROOT=$PWD/install && \
    curl https://pyenv.run > pyenv.sh && \
    bash pyenv.sh && \
    export PYTHON_VERSION=$(sed -nr 's/^python = "(.*)"/\1/p' < pyproject.toml) && \
    $PYENV_ROOT/bin/pyenv install $PYTHON_VERSION || { ret=$? ; cat /tmp/python-build.*.log ; exit $ret ; } && rm -rf /tmp/python-build* && \
    export PYTHON_ROOT=$PYENV_ROOT/versions/$PYTHON_VERSION && \
    export PATH=$PYTHON_ROOT/bin:$PATH && \
    pip install poetry && \
    echo Installing Python dependencies into $PYTHON_ROOT >&2 && poetry config virtualenvs.create false && \
    poetry install && \
    ln -sf $PYTHON_ROOT $PWD/active


# Start the final container build.
FROM ubuntu:20.04

ARG protobuf_version=3.18.1

# The image expects the following volumes mounted from the host:
# /cache - holding the sccache artifacts
# /cargo - is the CARGO_HOME, holding cargo binaries and cloned repos
# /builds/git - a read only volume with the git repository which should be built

ENV TZ=UTC

# The Python build dependencies section in this install command
# should be updated both here and in the README.md file.  When
# a build dependency is added (above / README.md file), the
# runtime dependencies should be updated to contain the runtime
# (not the -dev) package corresponding to it.  Don't worry,
# if dependencies are missing in the runtime section, the build
# will alert you.
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    apt -yq update && \
    apt -yqq install --no-install-recommends \
        git openssh-client curl xz-utils time apt-transport-https ca-certificates lsb-release gnupg2 && \
    echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && \
    curl -s -L "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key" | apt-key add - && \
    apt -yq update && \
    apt -yqq install --no-install-recommends \
        build-essential pkg-config libssl-dev cmake libbz2-dev gcc-multilib rsync \
        clang lld lldb liblz4-dev librocksdb-dev libsnappy-dev libzstd-dev \
        liblmdb0 libsqlite3-dev sqlite3 vim nano jq zip unzip shellcheck \
        iputils-ping sudo gosu podman tini && \
    chmod +s /usr/sbin/gosu && \
    echo Installing Python runtime dependencies for the Python built before >&2 && \
    apt -yqq install --no-install-recommends \
        libtk8.6 && \
    echo Cleaning out APT cache for smaller images as per 'http://docs.projectatomic.io/container-best-practices/#_clearing_packaging_caches_and_temporary_package_downloads' >&2 && \
    apt-get clean

# Copy the Python built in the pythonbuilder container to the final container.
COPY --from=pythonbuilder /opt/pyenv /opt/pyenv/
# Verify all shared libraries are available.  If this step fails, you must add
# the package for that shared library above in the Python runtime dependencies.
# Note: the libopenblas exception listed below exists because that library
# links to a libgfortran library within the same directory (not part of the
# system library path) and therefore is not an error if `ldd` can't "find" it.
RUN echo Verifying all shared libraries are available for Python >&2 && \
    if find /opt/pyenv/active/ -name "*.so" -a ! -name "libopenblas*" | xargs -n1 ldd | grep ' not found' >&2 ; then echo The libraries listed above are missing >&2 ; exit 4 ; fi
ENV PATH=/opt/pyenv/active/bin:$PATH

# Install the "mold" linker for fast linking of Rust executables
ARG mold_version=1.1.1
RUN curl -fsSL https://github.com/rui314/mold/releases/download/v${mold_version}/mold-${mold_version}-x86_64-linux.tar.gz | tar -xz -C /usr/local --strip-components 1

RUN cd `mktemp -d`; curl --fail -LO https://github.com/protocolbuffers/protobuf/releases/download/v${protobuf_version}/protoc-${protobuf_version}-linux-x86_64.zip; unzip * -d /opt/protoc; chmod -R 755 /opt/protoc/bin; chmod -R u+rwX,go+rX,go-w /opt/protoc/include

# Add the `ubuntu` user, and the required folders
RUN useradd -ms /bin/bash -u 1000 ubuntu && \
    mkdir -p /home/ubuntu && \
    chown -R ubuntu.ubuntu /home/ubuntu && \
    mkdir -p /cargo /cargo_target /builds /builds/dfinity-lab && \
    chown -R 1000.1000 /cargo /cargo_target /builds

# Allow passworless sudo. entrypoint.sh relies on sudo
RUN usermod -a -G sudo ubuntu && echo "ubuntu ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Install Rust and Cargo in /opt
ENV RUSTUP_HOME=/opt/rustup \
    CARGO_HOME=/opt/cargo \
    CARGO_TARGET_DIR=/cargo_target \
    ZSTD_LIB_DIR=/usr/lib \
    PROTOC=/opt/protoc/bin/protoc \
    PROTOC_INCLUDE=/opt/protoc/include \
    PATH=/opt/cargo/bin:$PATH

# Make sure /rust-toolchain.toml has the same version
ARG rust_version=1.65.0
RUN curl --fail https://sh.rustup.rs -sSf \
        | sh -s -- -y --default-toolchain ${rust_version}-x86_64-unknown-linux-gnu --no-modify-path && \
    rustup default ${rust_version}-x86_64-unknown-linux-gnu && \
    rustup component add rls && \
    chown -R ubuntu.ubuntu ${RUSTUP_HOME} ${CARGO_HOME}

# Cargo maintains a local cache of the registry index and of git checkouts of crates at CARGO_HOME
# Set this to a host-mounted volume
ENV CARGO_HOME=/cargo

# Used to detect the Dockerfile changes and automatically rebuild the image
COPY docker /docker

# Download ic-admin
ARG ic_git_revision=344a20409415f65a494cb4dc2f9241b687c34868
RUN  curl --fail https://download.dfinity.systems/ic/${ic_git_revision}/release/ic-admin.gz -o - | gunzip -c >| /usr/bin/ic-admin && \
    chmod +x /usr/bin/ic-admin

USER ubuntu

# Adds the GitHub and GitLab signatures to known_hosts so that `git pull` calls don't require user approval
RUN mkdir --mode=0700 /home/ubuntu/.ssh && \
    printf "# github.com:22 SSH-2.0-babeld-c34a939f\n|1|TtiEWekp4T2g6QFM8DnKUWYsXdw=|Vfo6utz2X8h5YSK2kjy1NrrVDQs= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\n# gitlab.com:22 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\n|1|fzEEbwQf9OkgzIxxgASmZp9L0Ec=|rty0872nCLuKDCsl3fuGSEmS81U= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n# gitlab.com:22 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\n|1|k6eNETvB6tZStZlifmM3Y6qrmkw=|AWemKhMqEjFAPf/125ARU2xLpmk= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n# gitlab.com:22 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\n|1|/5OjzdrCg7KAVMh9Q3xfH0OvqLY=|9Yl++Oih6L3ENgUjQCx3uqFPvfc= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n# gitlab.com:22 SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\n" >> /home/ubuntu/.ssh/known_hosts && chmod 0600 /home/ubuntu/.ssh/known_hosts

COPY docker/entrypoint.sh /entrypoint.sh
WORKDIR /

ENTRYPOINT ["/tini", "--", "/entrypoint.sh"]
