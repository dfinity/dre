.docker-base:
  image: docker/compose:alpine-1.29.2
  needs: []
  dependencies: []
  stage: release
  retry: 2
  interruptible: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    RELEASE_BRANCH: release
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"

dashboard-release-build:
  extends:
    - .docker-base
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - dashboard/**/*
        - rs/**/*
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  script:
    - |
      set -exou pipefail

      cd dashboard
      TAG=latest

      # pull latest layer to help with build times
      docker-compose pull || true
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel



docker-image-update:
  stage: .pre
  extends:
    - .rules-default
  interruptible: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - docker/**/*
        - Pipfile
        - Pipfile.lock
        - pyproject.toml
        - poetry.lock
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  script:
    - python3 docker/docker-update-image.py


metrics-proxy-release:
  stage: release
  needs: []
  dependencies: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:  # auto run if there are changes in this dir
        - metrics-proxy
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual  # manual runs otherwise on MRs
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  interruptible: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    IMAGE_REGISTRY_BASE: $CI_REGISTRY_IMAGE
    RELEASE_BRANCH: release
    DOCKER_BUILDKIT: "1"
    IMAGE_TAG: "vector-up-proxy:latest"
  script:
    - cd metrics-proxy
    - docker build -t "$IMAGE_REGISTRY_BASE/$IMAGE_TAG" .
    - if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]; then exit 0; fi
    - docker push $IMAGE_REGISTRY_BASE/$IMAGE_TAG

linear-jira-release:
  stage: release
  needs: []
  dependencies: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:  # auto run if there are changes in this dir
        - linear-jira
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual  # manual runs otherwise on MRs
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  interruptible: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    IMAGE_REGISTRY_BASE: $CI_REGISTRY_IMAGE
    DOCKER_BUILDKIT: "1"
    IMAGE_NAME: "$IMAGE_REGISTRY_BASE/linear-jira"
  script:
    - cd linear-jira
    - docker build -t "$IMAGE_NAME:latest" .
    - if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]; then exit 0; fi
    - docker tag "$IMAGE_NAME:latest" "$IMAGE_NAME:$CI_COMMIT_SHA"
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHA"
    - docker push "$IMAGE_NAME:latest"

dashboard-release-publish:
  extends:
    - .docker-base
  interruptible: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH' # upon a merge to main
      changes:
        - dashboard/**/*
        - rs/**/*
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  script:
    - |
      set -exou pipefail

      cd dashboard

      # pull latest layer to help with build times
      docker-compose pull || true
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml push
      TAG=${CI_COMMIT_SHA} docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel
      TAG=${CI_COMMIT_SHA} docker-compose -f docker-compose.yml -f docker-compose.dev.yml push

      # checkout branch
      apk add git 
      git clone "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/dfinity-lab/private/k8s/k8s.git"

      cd k8s
      git config user.email "idx@dfinity.org"
      git config user.name "IDX GitLab Automation"
      git checkout -b "update-image-tag-${CI_COMMIT_SHA}"

      # sed the changes
      # this regex matches the first group (ie the image name) and uses \1
      # called a back-reference to insert the first group matched, the second
      # part is to match the 40 characters hash that we replace with the $CI_COMMIT_SHA
      sed -i "s~\(\([[:alpha:]]\|-\)\+\):[[:alnum:]]\{40\}~\1:${CI_COMMIT_SHA}~g" bases/apps/mainnet-dashboard/statefulset-slack.yaml bases/apps/mainnet-dashboard/backend/base/deployment.yaml bases/apps/mainnet-dashboard/frontend/deployment.yaml

      # commit, push & create new merge request
      git add .
      if git diff --cached --quiet; then
          echo "No changes to commit."
          exit 0
      fi

      git commit -m "Updating container base image refs"
      git push \
          -o merge_request.create \
          -o merge_request.title="[nomrbot] - Updating container image refs mainnet-dashboard [$CI_COMMIT_SHA]" \
          -o merge_request.description="Changes to the release repository - [here](https://gitlab.com/dfinity-lab/core/release/-/commit/$CI_COMMIT_SHA)" \
          --force --set-upstream origin "update-image-tag-${CI_COMMIT_SHA}"


