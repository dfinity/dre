.docker-base:
  image: docker/compose:alpine-1.29.2
  needs: []
  dependencies: []
  stage: release
  retry: 2
  interruptible: true
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    RELEASE_BRANCH: release
    COMPOSE_DOCKER_CLI_BUILD: "1"
    DOCKER_BUILDKIT: "1"

dashboard-release-build:
  tags:
    - ubuntu
    - dfinity-shared
  extends:
    - .docker-base
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - dashboard/**/*
        - rs/**/*
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  script:
    - |
      set -exou pipefail

      cd dashboard
      TAG=latest

      # pull latest layer to help with build times
      docker-compose pull || true
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel

.rules-base-image:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - docker/**/*
        - Pipfile
        - Pipfile.lock
        - pyproject.toml
        - poetry.lock

docker-image-update:
  stage: .pre
  extends:
    - .kaniko-build
  rules:
    - !reference [.rules-base-image, rules]
    - !reference [.rules-manual, rules]
  interruptible: true
  # Some of those rules are made to make the build reproducible
  # --reproducible
  # --snapshotMode
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "docker/Dockerfile"
      --cache
      --cache-repo "${CI_REGISTRY_IMAGE}/ci-build/no-docker-cache"
      --destination "${CI_REGISTRY_IMAGE}/ci-build/no-docker:latest"
      --snapshotMode=redo
      --digest-file digest
      --reproducible
    - mkdir -p /workspace # Fails without creating this folder due to https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29587/
  artifacts:
    paths:
      - digest

update-base-image:
  stage: .post
  extends:
    - .k8s-workers
  rules:
    - if: '$CI_COMMIT_AUTHOR == "Release Team <eng-release-bots-aaaafbmaump5gpag4pbjfuarry@dfinity.slack.com>"'
      when: never
    - !reference [.rules-base-image, rules]
    - !reference [.rules-manual, rules]
  interruptible: true
  variables:
    UPDATE_SUBMODULES: "false"
  image:
    name: registry.gitlab.com/dfinity-lab/core/release/ci-build/no-docker@sha256:5a755ae16ae3d3358319460e37c50f5ccf9af73735b4ed1e77706ed2c0637cc8
  needs:
    - job: docker-image-update
      artifacts: true
  script:
    - python3 gitlab-ci/update-base-image-sha.py $(cat digest)

metrics-proxy-release:
  stage: release
  extends:
    - .kaniko-build
  needs: []
  dependencies: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:  # auto run if there are changes in this dir
        - metrics-proxy
    - !reference [.rules-manual, rules]
  interruptible: true
  variables:
    IMAGE_TAG: "vector-up-proxy"
    IMAGE_VERSION: "latest"
  script:
    - |
      if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]; then
        export KANIKO_NO_PUSH_FLAG="--no-push"
      else
        export KANIKO_NO_PUSH_FLAG=""
      fi
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/metrics-proxy"
      --dockerfile "metrics-proxy/Dockerfile"
      --cache
      --cache-repo "${CI_REGISTRY_IMAGE}/${IMAGE_TAG}/cache"
      --destination "${CI_REGISTRY_IMAGE}/${IMAGE_TAG}:${IMAGE_VERSION}"
      --reproducible
      $KANIKO_NO_PUSH_FLAG
    - mkdir -p /workspace # Fails without creating this folder due to https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29587/

linear-jira-release:
  stage: release
  extends:
    - .kaniko-build
  needs: []
  dependencies: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:  # auto run if there are changes in this dir
        - linear-jira
    - !reference [.rules-manual, rules]
  interruptible: true
  variables:
    IMAGE_NAME: "linear-jira"
  script:
    - |
      if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]; then
        export KANIKO_NO_PUSH_FLAG="--no-push"
      else
        export KANIKO_NO_PUSH_FLAG=""
      fi
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${IMAGE_NAME}"
      --cache
      --cache-repo "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}/cache"
      --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"
      --destination "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}"
      --reproducible
      $KANIKO_NO_PUSH_FLAG
    - mkdir -p /workspace # Fails without creating this folder due to https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29587/

dashboard-release-publish:
  extends:
    - .docker-base
  interruptible: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH' # upon a merge to main
      changes:
        - dashboard/**/*
        - rs/**/*
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
  script:
    - |
      set -exou pipefail

      cd dashboard

      # pull latest layer to help with build times
      docker-compose pull || true
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel
      TAG=latest docker-compose -f docker-compose.yml -f docker-compose.dev.yml push
      TAG=${CI_COMMIT_SHA} docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --parallel
      TAG=${CI_COMMIT_SHA} docker-compose -f docker-compose.yml -f docker-compose.dev.yml push

      # checkout branch
      apk add git 
      git clone "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/dfinity-lab/private/k8s/k8s.git"

      cd k8s
      git config user.email "idx@dfinity.org"
      git config user.name "IDX GitLab Automation"
      git checkout -b "update-image-tag-${CI_COMMIT_SHA}"

      # sed the changes
      # this regex matches the first group (ie the image name) and uses \1
      # called a back-reference to insert the first group matched, the second
      # part is to match the 40 characters hash that we replace with the $CI_COMMIT_SHA
      sed -i "s~\(\([[:alpha:]]\|-\)\+\):[[:alnum:]]\{40\}~\1:${CI_COMMIT_SHA}~g" bases/apps/mainnet-dashboard/statefulset-slack.yaml bases/apps/mainnet-dashboard/backend/base/deployment.yaml bases/apps/mainnet-dashboard/frontend/deployment.yaml

      # commit, push & create new merge request
      git add .
      if git diff --cached --quiet; then
          echo "No changes to commit."
          exit 0
      fi

      git commit -m "Updating container base image refs"
      git push \
          -o merge_request.create \
          -o merge_request.title="[nomrbot] - Updating container image refs mainnet-dashboard [$CI_COMMIT_SHA]" \
          -o merge_request.description="Changes to the release repository - [here](https://gitlab.com/dfinity-lab/core/release/-/commit/$CI_COMMIT_SHA)" \
          --force --set-upstream origin "update-image-tag-${CI_COMMIT_SHA}"


