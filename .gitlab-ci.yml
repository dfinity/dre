default:
  image: registry.gitlab.com/dfinity-lab/core/release/ci-build@sha256:a74ec89d678e1f1d5473e3a6862f5ffd56f45c2fdc4d1d7f93a13e7afb53ef31
  tags:
    # Use the DFINITY CI runners (they have following tags)
    - dfinity-shared
    - ubuntu
  # Retry config copied from:
  # https://gitlab.com/gitlab-org/gitlab/blob/master/.gitlab/ci/global.gitlab-ci.yml#L1-9
  # Complete description available at:
  # https://docs.gitlab.com/ee/ci/yaml/#retry
  retry:
    max: 2 # This is confusing but this means "3 runs at max".
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure

stages:
  - build
  - release
  - test

variables:
  QUALIFY_GIT_REVISION:
    description: "Please provide the git revision that should be qualified"
  IC_ADMIN_REVISION:
    description: "Optionally provide a revision for the IC admin version to use"
  GET_SOURCES_ATTEMPTS: 5
  GIT_DEPTH: 0 # Pull the complete repo initially
  GIT_STRATEGY: "fetch" # And then pull only new commits
  CI_PRE_CLONE_SCRIPT: |
    # This script prepares the docker container for running the job
    # The most important thing done here is pre-seeding the repo in the $CI_PROJECT_DIR so that
    # the docker gitlab runner doesn't have to re-clone the repo for every job
    # Example of the (official gitlab) CI_PRE_CLONE_SCRIPT:
    # https://docs.gitlab.com/ee/development/pipelines.html#pre-clone-step
    # MacOS note: the gitlab runner will ignore this var on MacOS since config does not have
    # pre_clone_script set in the runner config

    set -exuo pipefail
    echo -e "\e[0Ksection_start:@(date +%s):pre_clone_script[collapsed=true]\r\e[0KClick here to see the pre_clone_script section"

    # Fail the git clone/pull if too slow
    export GIT_HTTP_LOW_SPEED_LIMIT=10000 GIT_HTTP_LOW_SPEED_TIME=10 GIT_SSH_COMMAND='timeout 300 ssh -T'

    # WARNING: We use @ instead of $ because GitLab sometimes silently converts $VAR into VAR
    # WARNING: The @ signs will be replaced with $ before executing the script
    rm -rf "@{CI_PROJECT_DIR}"
    mkdir -p "@{CI_PROJECT_DIR}"
    chown 1000:1000 -R "@{CI_PROJECT_DIR}"
    if [[ -d "/cache/git-v3/@{CI_PROJECT_PATH}/@CI_CONCURRENT_ID" ]]; then
      trap 'rm -rf "/cache/git-v3/@{CI_PROJECT_PATH}/@CI_CONCURRENT_ID"' ERR
      # Concurrent jobs are separated into different git repo cache folders
      echo "Copying the git repo from /cache/git-v3/@{CI_PROJECT_PATH}/@{CI_CONCURRENT_ID} to @{CI_PROJECT_DIR}"
      /usr/bin/time cp -a --no-target-directory "/cache/git-v3/@{CI_PROJECT_PATH}/@CI_CONCURRENT_ID/" "@{CI_PROJECT_DIR}/"

      if [[ -n "@{GIT_CLONE_PATH:-}" && "@{GIT_CLONE_PATH:-}" != "@{CI_PROJECT_DIR}" ]]; then
        # @GIT_CLONE_PATH is set to a value different from @{CI_PROJECT_DIR}
        # In general the two should be the same so this code path should never be exercised
        rm -rf "@GIT_CLONE_PATH"
        mkdir -p "@GIT_CLONE_PATH"
        chown 1000:1000 -R "@GIT_CLONE_PATH"
        /usr/bin/time cp -a --no-target-directory "/cache/git-v3/@{CI_PROJECT_PATH}/@CI_CONCURRENT_ID/" "@GIT_CLONE_PATH/"
      fi


      # Ensure the git repo is clean and up to date with the upstream
      cd "@{CI_PROJECT_DIR}"
      git reflog expire --expire=now --all
      git gc --prune=now
      git fsck --full
      git submodule foreach git reflog expire --expire=now --all
      git submodule foreach git gc --prune=now
      git submodule foreach git fsck --full
      # Disable all background git operations
      git config gc.auto 0
      git config gc.autodetach false

      # Ensure that there are not background git operations running and remove all lock files if they exist
      if ! {
        set -e
        pkill git || true
        find .git -name '*.lock' -delete
        # Delete all branches for which a reference (sha) does not exist
        set +x
        git for-each-ref --format="%(refname)" | while read ref; do
          git show-ref --quiet --verify @ref 2>/dev/null || git update-ref -d @ref
        done
        set -x
        if ! git remote add origin "@{CI_REPOSITORY_URL}"; then
          git remote set-url origin "@{CI_REPOSITORY_URL}"
        fi
        git fetch --prune --prune-tags
        # Run a GC on the repo
        git gc --prune=now --force
        git reflog expire --expire=0 --all
      }; then
        rm -rf .git
      fi
    fi
    echo -e "\e[0Ksection_end:$(date +%s):pre_clone_script\r\e[0K"

.rules-default:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run

.rules-autorun-on-trigger:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'

.rules-manual:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual  # manual runs otherwise on MRs
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true # the pipeline continues running even if the manual job is not run

.k8s-workers:
  tags:
    - ubuntu
    - dfinity-shared
  image:
    name: registry.gitlab.com/dfinity-lab/core/release/ci-build/no-docker@sha256:6e2e19f2df56d94bf40a28c7f42da9c8ffcb82fbdbf7b50d9045929f88e207ef

.kaniko-build:
  tags:
    - ubuntu
    - dfinity-shared
  image:
    name: gcr.io/kaniko-project/executor:debug # debug is required for gitlab as it needs to run a shell inside.
    entrypoint: [""]
  before_script: ""
  # See https://stackoverflow.com/a/13864829 for explanation of the +x in var expansion
  script:
    - "[[ -z ${APP+x} ]] && echo 'APP is not defined' && exit 1"
    - "[[ -z ${CONTEXT_PATH+x} ]] && echo 'CONTEXT_PATH is not defined' && exit 1"
    - "[[ -z ${DOCKERFILE_PATH+x} ]] && echo 'DOCKERFILE_PATH is not defined' && exit 1"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${CONTEXT_PATH}"
      --dockerfile "${DOCKERFILE_PATH}"
      --cache
      --cache-repo "${CI_REGISTRY_IMAGE}/${APP}/cache"
      --destination "${CI_REGISTRY_IMAGE}/${APP}:latest"
      --destination "${CI_REGISTRY_IMAGE}/${APP}:${CI_COMMIT_SHA}"
      --snapshotMode=redo
      --reproducible
    - mkdir -p /workspace # Fails without creating this folder due to https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29587/

before_script:
  - |
    # Execute the before_script section

    # Start the (collapsed) before_script section
    set -exuo pipefail
    echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

    mkdir -m 0700 -p ~/.ssh
    echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
    ulimit -n 8192
    date

    # forget original timestamp/timestamp when compressing ~ important for reproducibility
    export GZIP=-n

    # alpine images do not have: git, sudo, rsync, ...
    if [[ -n "$(which apk)" ]]; then
      apk add rsync sudo git
    fi

    if ! id -u ubuntu > /dev/null 2>&1; then
      mkdir -p "/home/ubuntu"
      echo "ubuntu:x:99:99:ubuntu:/home/ubuntu:/bin/sh" >> /etc/passwd
      echo "ubuntu:x:99:" >> /etc/group
      chown ubuntu:ubuntu -R "/home/ubuntu"
    fi
    sudo chown ubuntu:ubuntu -R "${CI_PROJECT_DIR}"

    if [[ "${UPDATE_SUBMODULES:-true}" == "true" ]]; then
      # Set the IC repo URL to https instead of ssh, and check out the submodule
      git submodule set-url ic "https://github.com/dfinity/ic.git"
      if ! git submodule update --init --recursive --remote; then
        cat .git/config
        cat .gitmodules
        cat .git/modules/ic/config
        rm -rf /cache/git-v3/${CI_PROJECT_PATH}
        exit 1
      fi
    fi

    sudo find "${CI_PROJECT_DIR}" -type d -exec chmod 0755 '{}' \;
    # Update the git repo cache at /cache/git-v3/${CI_PROJECT_PATH}/$CI_CONCURRENT_ID
    sudo mkdir -p "/cache/git-v3/${CI_PROJECT_PATH}/$CI_CONCURRENT_ID/"
    sudo chown ubuntu:ubuntu -R "/cache/git-v3/${CI_PROJECT_PATH}/$CI_CONCURRENT_ID/"
    /usr/bin/time rsync -a --force --delete "$CI_PROJECT_DIR"/ "/cache/git-v3/${CI_PROJECT_PATH}/$CI_CONCURRENT_ID/"

    cd "${CI_PROJECT_DIR}"
    # Ensure file permissions in the repo are what git expects them to be
    git config core.fileMode true
    git reset --hard HEAD

    echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"

    # Setup SSH keys
    if [[ -z "$(which ssh-agent)" ]]; then 
      if [[ -n "$(which apk)" ]]; then
        apk add openssh-client
      elif [[ -n "$(which apt-get)" ]]; then 
        apt-get update -y && apt-get install openssh-client -y
      else  
        echo "- ERROR system has neither apk nor apt-get"
        echo "  Could not install ssh-agent"
        exit 1
      fi
    fi

    eval $(ssh-agent -s)
    cat "$DASHBOARD_DEPLOY_KEY" | tr -d '\r' | ssh-add -

include:
  - local: /gitlab-ci/test.yml
  - local: /gitlab-ci/build-publish-images.yml
  - local: /gitlab-ci/release.yml
  - local: /gitlab-ci/dashboard.yml
