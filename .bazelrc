build --workspace_status_command=$(pwd)/bazel/workspace_status.sh --stamp

# Use local disk cache by default
build --disk_cache=~/.cache/bazel/local_cache

# Repository cache
build --repository_cache=~/.cache/bazel/repository_cache

# Use hard links in the repository cache, to save disk space
build --experimental_repository_cache_hardlinks=true

# Retry downloads
build --experimental_repository_downloader_retries=3

# Use hermetic JDK
# See https://bazel.build/docs/bazel-and-java#hermetic-testing
build --java_runtime_version=remotejdk_17

# --config=ci implies --config=lint
build:ci --config=lint
# --config=ci implies --config=dfinity
build:ci --config=dfinity
# --config=lint implies both --config=fmt and --config=clippy.
build:lint --config=fmt
build:lint --config=clippy

build:ci --progress_report_interval=30

build --nosandbox_default_allow_network
build --incompatible_strict_action_env # use an environment with a static value for PATH and do not inherit LD_LIBRARY_PATH

# default to optimized and unstripped binaries.
build --compilation_mode=opt
build --@rules_rust//:extra_rustc_flags=-Cdebug-assertions=on
build --@rules_rust//:extra_rustc_flag=-Dbindings_with_variant_name
build --strip=never

build:dfinity --remote_cache=bazel-remote.idx.dfinity.network
build --experimental_remote_cache_async
build --remote_timeout=30s # Default is 60s.
build:ci --remote_timeout=5m # Default is 60s.

build:dfinity --experimental_remote_downloader=bazel-remote.idx.dfinity.network --experimental_remote_downloader_local_fallback
build:local --experimental_remote_downloader=

# Does not produce valid JSON. See https://github.com/bazelbuild/bazel/issues/14209
build --execution_log_json_file=bazel-build-log.json
build:ci --build_event_binary_file=bazel-bep.pb

build:dfinity --bes_results_url=https://dash.idx.dfinity.network/invocation/
build:dfinity --bes_backend=bes.idx.dfinity.network
build --bes_timeout=30s # Default is no timeout.
build:ci --bes_timeout=180s # Default is no timeout.

build --remote_local_fallback
build --experimental_repository_downloader_retries=3 # https://bazel.build/reference/command-line-reference#flag--experimental_repository_downloader_retries

build --cxxopt='-std=c++17'
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks
build --@rules_rust//:clippy.toml=//:clippy.toml --@rules_rust//:clippy_flags=-D,warnings,-D,clippy::all,-D,clippy::mem_forget,-A,clippy::manual_clamp,-A,clippy::redundant_closure,-A,clippy::too_many_arguments,-C,debug-assertions=off

build:fmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:fmt --output_groups=+rustfmt_checks
build --@rules_rust//:rustfmt.toml=//:rustfmt.toml

test --test_output=errors
test --test_env=RUST_BACKTRACE=full

test:precommit --build_tests_only
# Run all tests once by default, run flaky tests up to 3 times in CI.
test    --flaky_test_attempts=1
test:ci --flaky_test_attempts=default
build:ci --noremote_local_fallback
# So that developers can build in debug mode.
build:dev --compilation_mode=fastbuild
build:macos_ci --compilation_mode=fastbuild

# Run `bazel build ... --config=local` if you don't have access to the buildfarm infrastructure.
build:local --remote_cache=
build:local --bes_backend=

# Suppress all additional output to make it more convenient in scripts
query --ui_event_filters=-info,-debug --noshow_progress
cquery --ui_event_filters=-info,-debug --noshow_progress

try-import %workspace%/user.bazelrc
